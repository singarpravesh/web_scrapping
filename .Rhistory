html_nodes('div[class="#features > li:nth-child(1) > div:nth-child(2)"]') %>%
html_text() %>% list()
} else {
Other_facilities[i] <- NA
}
}, error = function(e) {
message("Other facilities not found: ", e$message)
})
Sys.sleep(3)
# Locational advantages
tryCatch({
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", "#LANDMARK_VIEW_ALL")) {
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La1 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La1 <- NA
}
### Next location
Sys.sleep(5)
if (element_exists("css", "i.pageComponent")) {
remDr$findElement(using = "css", value = "i.pageComponent")$clickElement()
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$findElement(using = "css", value = ".RoadDistanceBtmSheet__nudgeWrapper > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La2 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
}else {
La2 <- NA
}
Sys.sleep(2)
if (element_exists("css", ".icon_goToTop")){
remDr$findElement(using = "css", value = ".icon_goToTop")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(3) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La3 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La3 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", value = "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(4) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La4 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La4 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(5) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La5 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La5 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(6) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La6 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La6 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(7) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La7 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La7 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
} else {
La8 <- NA
}
Sys.sleep(5)
Locational_advantages[i] <- mget(paste0('La', 1:8)) |> list()
Sys.sleep(3)
if (!is.na(Locational_advantages[i])){
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", "#LANDMARK_VIEW_ALL")) {
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad1 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad1 <- NA
}
### Next location
Sys.sleep(2)
if (element_exists("css", "i.pageComponent")) {
remDr$findElement(using = "css", value = "i.pageComponent")$clickElement()
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$findElement(using = "css", value = ".RoadDistanceBtmSheet__nudgeWrapper > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad2 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
}else {
Lad2 <- NA
}
Sys.sleep(2)
if (element_exists("css", ".icon_goToTop")){
remDr$findElement(using = "css", value = ".icon_goToTop")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(3) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad3 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad3 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", value = "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(4) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad4 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad4 <- NA
}
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(5) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad5 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad5 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(6) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad6 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad6 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(7) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad7 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad7 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
} else {
Lad8 <- NA
}
Distance_to_locational_advantage[i] <- mget(paste0('La', 1:8)) |> list()
} else {
Distance_to_locational_advantage[i] <- NA
}
}, error = function(e) {
message("Locational advantages not found: ", e$message)
})
remDr$closeWindow()
rD$server$stop()
# Remove the objects that can clutter the environment
remove(html)
remove(json_ld_data)
remove(json_ld_script)
remove(html_page)
remove(rD)
remove(remDr)
gc()
Sys.sleep(3)
}
# Data within the buffer of 20 km
housing_data_buffer
# Data within the buffer of 20 km
housing_data_buffer |> names()
kolkata_green_spaces$osm_polygons
kolkata_green_spaces$osm_polygons |> names()
# Data within the buffer of 20 km
housing_data_buffer |> dim()
kolkata_green_spaces$osm_polygons |> dim()
housing_data2 <- mget(paste0('housing_data_page', 26:32)) |>
bind_rows() |>
unnest_wider(c(1, 2),names_sep = "_") |>
select(c(1,3,5:11)) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) |>
rename(price = price_1,
bhk = bhk_1)
library(tidyverse)
housing_data2 <- mget(paste0('housing_data_page', 26:32)) |>
bind_rows() |>
unnest_wider(c(1, 2),names_sep = "_") |>
select(c(1,3,5:11)) |>
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) |>
rename(price = price_1,
bhk = bhk_1)
housing_data <-  bind_rows(housing_data1, housing_data2)
# Housing data
housing_data_sf <-  housing_data %>%
na.omit() %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(kolkata_buffer))
library(osmdata)
library(sf)
# Housing data
housing_data_sf <-  housing_data %>%
na.omit() %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(kolkata_buffer))
rm(house_data_sf)
# Extract housing data within the buffer area
housing_data_buffer <- st_intersection(housing_data_sf, kolkata_buffer)
kolkata_green_spaces$osm_polygons |> dim()
st_intersect(kolkata_green_spaces$osm_polygons, housing_data_buffer)
st_intersection(kolkata_green_spaces$osm_polygons, housing_data_buffer)
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE)
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |> names()
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |>
ggplot()+
geom_sf(data = ., fill = "lightgrey")
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |>
ggplot()+
geom_sf( fill = "lightgrey")
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE)$geometry()
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE)$geometry
library(osmdata)
library(sf)
library(ggplot2)
library(tidyverse)
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |>
ggplot()+
geom_sf( fill = "lightgrey")
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |> names()
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE)$landuse
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE)$leisure
st_join(housing_data_buffer, kolkata_green_spaces$osm_polygons, left = TRUE) |> View(
)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks, color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
library(leaflet)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks, color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Extract the relevant data
parks <- green_spaces$osm_polygons
# Query OSM for green spaces
green_spaces <- opq(bbox = bbox) %>%
add_osm_feature(key = 'leisure', value = 'park') %>%
osmdata_sf()
# Define the bounding box for Kolkata
bbox <- getbb("Kolkata, India")
# Query OSM for green spaces
green_spaces <- opq(bbox = bbox) %>%
add_osm_feature(key = 'leisure', value = 'park') %>%
osmdata_sf()
# Extract the relevant data
parks <- green_spaces$osm_polygons
# Extract coordinates
parks_coords <- st_coordinates(parks)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks, color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
green_spaces
green_spaces$osm_polygons
parks$name[2]
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks$name[2], color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks$name[2,], color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks[2,], color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks[3,], color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks[9,], color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
kolkata_green_spaces
kolkata_green_spaces$osm_polygons
kolkata_green_spaces$osm_polygons |>
mutate(greens = if_else(
name = "<na>", 0, 1)
) |> group_by(greens) |> summarise(n())
kolkata_green_spaces$osm_polygons |>
mutate(greens = if_else(
name == "<na>", 0, 1)
) |> group_by(greens) |> summarise(n())
kolkata_green_spaces$osm_polygons$landuse |> table()
?add_osm_features()
# Extract green spaces in Kolkata_buffer
kolkata_green_spaces <- opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"landuse" = "forest",
"landuse" = "grass",
"landuse" = "meadow",
"landuse" = "recreation_ground",
"landuse" = "village_green"
)) |>
osmdata_sf()
kolkata_green_spaces$osm_polygons$landuse |> table()
opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"landuse" = "forest",
"landuse" = "grass",
"landuse" = "meadow",
"landuse" = "recreation_ground",
"landuse" = "village_green",
"leisure" = "park"
)) |>
osmdata_sf() |> table()
c(opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"landuse" = "forest",
"landuse" = "grass",
"landuse" = "meadow",
"landuse" = "recreation_ground",
"landuse" = "village_green"
)) |>
osmdata_sf(),
opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"leisure" = "park"
)) |>
osmdata_sf()
)|> table()
opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"landuse" = "forest",
"landuse" = "grass",
"landuse" = "meadow",
"landuse" = "recreation_ground",
"landuse" = "village_green"
)) |>
osmdata_sf() -> a
opq(bbox = kolkata_buffer_bbox) %>%
add_osm_feature(key = "leisure",
value = "park"
) |>
osmdata_sf() -> b
c(a,b) -> b1
names(b1)
names(b1$osm_polygons)
b1$osm_polygons$leisure |> table()
b1$osm_polygons$leisure |> dim()
b1$osm_polygons |> dim()
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "yellow")
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "yellow")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", size = 3)
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", size = 3) +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", size = 8) +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", lwd = 4) +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", lwd = 2) +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the updated map
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", lwd = 1.5) +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green') +
geom_sf(data = b1$osm_polygons, fill = "green")+
geom_sf(data = housing_data_buffer$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", lwd = 1.5)
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey", lwd = 1)
# Extract green spaces in Kolkata_buffer
kolkata_landuse <- opq(bbox = kolkata_buffer_bbox) %>%
add_osm_features(features = list(
"landuse" = "forest",
"landuse" = "grass",
"landuse" = "meadow",
"landuse" = "recreation_ground",
"landuse" = "village_green"
)) |>
osmdata_sf()
