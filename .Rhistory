}, error = function(e) {
message("Locational advantages not found: ", e$message)
})
remDr$closeWindow()
rD$server$stop()
# Remove the objects that can clutter the environment
remove(html)
remove(json_ld_data)
remove(json_ld_script)
remove(html_page)
remove(rD)
remove(remDr)
gc()
}
library(tidyverse)
housing_data <- rows_append(housing_data_page1,
housing_data2_3)
housing_data
write.csv(housing_data, "housing_data.csv")
unnest(housing_data) |>
write.csv(housing_data, "housing_data.csv")
unlist(housing_data) |>
write.csv(housing_data, "housing_data.csv")
View(housing_data)
housing_data_page1 |>
unnest()
housing_data_page1 |>
unnest(area_sqft)
housing_data_page1 |>
unnest(area_sqft) |> View()
housing_data_page1 |>
unnest(area_sqft, top_facilities) |> View()
housing_data_page1 |>
unnest(c(area_sqft, top_facilities)) |> View()
housing_data_page1 |>
unnes_longert(area_sqft) |> View()
housing_data_page1 |>
unnest_longer(area_sqft) |> View()
housing_data_page1 |>
unnest_longer(c(area_sqft, top_facilities)) |> View()
housing_data_page1 |>
unnest_longer(area_sqft) |>
unnest_longer(top_facilities) |>  View()
housing_data_page1 |>
mutate(id = 1:length(housing_data_page1)) |> View()
View(housing_data_page1)
mutate(id = paste0(1:length(housing_data_page1, latitude)) |> View()
)''
housing_data_page1 |>
mutate(id = paste0(1:length(housing_data_page1, latitude))) |> View()
housing_data_page1 |>
mutate(id = paste0(1:length(housing_data_page1), latitude)) |> View()
length(housing_data_page1)
nrow(housing_data_page1)
housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), latitude)) |> View()
housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), "p1")) |> View()
housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), "p1")) |>
unnest_longer(area_sqft) |>
unnest_longer(top_facilities) |>  View()
housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), "p1")) |>
unnest_longer(area_sqft) |>
unnest_longer(top_facilities) |>
unnest_longer(other_facilities) |>
unnest_longer(locational_advantages) |>
unnest_longer(distance_to_locational_advantage) |>  View()
housing_data <- housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), "p1")) |>
unnest_longer(area_sqft) |>
unnest_longer(top_facilities) |>
unnest_longer(other_facilities) |>
unnest_longer(locational_advantages) |>
unnest_longer(distance_to_locational_advantage) |>  View()
housing_data <- housing_data_page1 |>
mutate(id = paste0(1:nrow(housing_data_page1), "p1")) |>
unnest_longer(area_sqft) |>
unnest_longer(top_facilities) |>
unnest_longer(other_facilities) |>
unnest_longer(locational_advantages) |>
unnest_longer(distance_to_locational_advantage)
View(housing_data)
housing_data |>
pivot_wider(names_from = area_sqft, values_from = bhk ) |>  View()
housing_data |>
group_by(top_facilities) |>
summarise(n())
housing_data |>
group_by(top_facilities) |>
summarise(n()) |>
View()
housing_data |>
group_by(other_facilities) |>
summarise(n()) |>
View()
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = Distance_to_locational_advantage)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = Distance_to_locational_advantage)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = distance_to_locational_advantage)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = distance_to_locational_advantage) |>
unlist_wider()
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = distance_to_locational_advantage) |>
unnest_wider(2:6)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage) |>
pivot_wider(names_from = locational_advantages, values_from = distance_to_locational_advantage) |>
unnest_wider(2:6, names_sep = "_")
housing_data <- rows_append(housing_data_page1,
housing_data2_3)
View(housing_data)
housing_data |>
select(id, locational_advantages, distance_to_locational_advantage)
housing_data |>
select(locational_advantages, distance_to_locational_advantage)
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |> View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
group_by(locational_advantages_1) |>
summarise(mean(distance_to_locational_advantage))
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
group_by(locational_advantages_1) |>
summarise(mean(na.omit(distance_to_locational_advantage))) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
na.omit() |>
group_by(locational_advantages_1) |>
summarise(mean((distance_to_locational_advantage))) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
na.omit() |>
group_by(locational_advantages_1) |>
summarise(mean(distance_to_locational_advantage)) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
na.omit() |>
group_by(locational_advantages_1) |>
summarise(mean(distance_to_locational_advantage_1)) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
na.omit() |>
group_by(locational_advantages_1) |>
summarise(n()) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_") |>
group_by(locational_advantages_1) |>
summarise(n()) |>  View()
housing_data |>
select(locational_advantages, distance_to_locational_advantage) |>
unnest_wider(1:2, names_sep = "_")
housing_data |> |>
housing_data |>
unnest_wider(1:2, names_sep = "_")
housing_data |>
unnest_wider(names_sep = "_")
housing_data |>
unnest_wider(c(1:3, 6:9),names_sep = "_")
housing_data |>
unnest_wider(c(1:3, 6:9),names_sep = "_") |> View()
housing_data |>
unnest_wider(c(1:3, 6:9),names_sep = "_") |>
write.csv("housing_data.csv")
read_csv("housing_data.csv") -> csv
csv
View(csv)
library(RSelenium)
library(dplyr)
library(rvest)
library(jsonlite)
library(readr)
library(tictoc)
urls4_6 <- list()
for (j in 2:3){
rD <- rsDriver(browser="firefox",chromever = NULL, port=netstat::free_port(), verbose=F)
remDr <- rD[["client"]]
# navigate to page j
remDr$navigate(paste0("https://www.99acres.com/property-in-kolkata-ffid-page", j))
# Get all the urls in page j
urls4_6[j] <- remDr$findElements(using = "xpath", "//*[@class='ellipsis']") |>
sapply(function(x){x$getElementAttribute("href")}[[1]]) %>%
list()
remDr$closeWindow()
rD$server$stop()
}
# Remove the objects that can clutter the environment
remove(html)
remove(json_ld_data)
remove(json_ld_script)
remove(html_page)
remove(rD)
remove(remDr)
gc()
urls4_6 <- list()
for (j in 4:6){
rD <- rsDriver(browser="firefox",chromever = NULL, port=netstat::free_port(), verbose=F)
remDr <- rD[["client"]]
# navigate to page j
remDr$navigate(paste0("https://www.99acres.com/property-in-kolkata-ffid-page", j))
# Get all the urls in page j
urls4_6[j] <- remDr$findElements(using = "xpath", "//*[@class='ellipsis']") |>
sapply(function(x){x$getElementAttribute("href")}[[1]]) %>%
list()
remDr$closeWindow()
rD$server$stop()
}
# Initalise the variables
Price <- c()
# Structural variables
Bhk <- c() # No of rooms (1,2,3,4)
Area_sqft <- list()
# Locational variables
Latitude <- c()
Longitude <- c()
Top_facilities <- list()
Other_facilities <- list()
Locational_advantages <- list()
Distance_to_locational_advantage <- list()
# Scrape the data in page 1
for (i in 1:length(unlist(urls4_6))){
rD <- rsDriver(browser="firefox",chromever = NULL, port=netstat::free_port(), verbose=F)
remDr <- rD[["client"]]
remDr$navigate(unlist(urls4_6)[i])
# Helper function to check if element exists
element_exists <- function(using, value) {
length(remDr$findElements(using = using, value = value)) > 0
}
# Click the OK button if it exists
if (element_exists("css", ".ReraDisclaimer__topDisclaimer > div:nth-child(1) > div:nth-child(2) > button:nth-child(1)")) {
remDr$findElement(using = "css", value = ".ReraDisclaimer__topDisclaimer > div:nth-child(1) > div:nth-child(2) > button:nth-child(1)")$clickElement()
} else {
message("OK button not found or could not be clicked")
}
# Data for price
if (element_exists("xpath", "//*[@class='list_header_semiBold configurationCards__configurationCardsHeading']")) {
Price[i] <- remDr$findElements(using = "xpath", "//*[@class='list_header_semiBold configurationCards__configurationCardsHeading']") |>
sapply(function(x){x$getElementText()[[1]]})
} else {
Price[i] <- NA
}
# BHK data
if (element_exists("xpath", "//*[@class='ellipsis list_header_semiBold configurationCards__configurationCardsSubHeading']")) {
Bhk[i] <- remDr$findElements(using = "xpath", "//*[@class='ellipsis list_header_semiBold configurationCards__configurationCardsSubHeading']") |>
sapply(function(x){x$getElementText()[[1]]})
} else {
Bhk[i] <- NA
}
# Area data
if (element_exists("xpath", "//*[@class='caption_subdued_medium configurationCards__cardAreaSubHeadingOne']")) {
Area_sqft[i] <- remDr$findElements(using = "xpath", "//*[@class='caption_subdued_medium configurationCards__cardAreaSubHeadingOne']") |>
sapply(function(x){x$getElementText()[[1]]}) %>%
list()
} else {
Area_sqft[i] <- NA
}
# Coordinates of the property
tryCatch({
html <- remDr$getPageSource()[[1]]
json_ld_script <- read_html(html) |>
html_nodes('script[type="application/ld+json"]')
json_ld_data <- lapply(json_ld_script, function(x) {
json_str <- html_text(x)
fromJSON(json_str)
})
Latitude[i] <- json_ld_data[[3]]$geo$latitude
Longitude[i] <- json_ld_data[[3]]$geo$longitude
}, error = function(e) {
message("Coordinates not found: ", e$message)
})
# Top facilities
tryCatch({
Top_facilities[i] <- read_html(html) |>
html_nodes('div[class="UniquesFacilities__xidFacilitiesCard"]') %>%
html_text() %>% list()
}, error = function(e) {
message("Top facilities not found: ", e$message)
})
# Other facilities
tryCatch({
remDr$executeScript("window.scrollTo(0,1600);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", ".UniquesFacilities__pageHeadingWrapper > a:nth-child(2)")) {
remDr$findElement(using = "css", value = ".UniquesFacilities__pageHeadingWrapper > a:nth-child(2)")$clickElement()
html_page <- remDr$getPageSource()[[1]] # Get the HTML content of the pop up page after click
Other_facilities[i] <- read_html(html_page) |>
html_nodes('div[class="body_med"]') %>%
html_text() %>% list()
} else {
Other_facilities[i] <- NA
}
}, error = function(e) {
message("Other facilities not found: ", e$message)
})
# Locational advantages
tryCatch({
remDr$executeScript("window.scrollTo(0,2100);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", ".OrderComponent__leftSection > div:nth-child(5) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > a:nth-child(2)")) {
remDr$findElement(using = "css", value = ".OrderComponent__leftSection > div:nth-child(5) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > a:nth-child(2)")$clickElement()
html_page <- remDr$getPageSource()[[1]]
Locational_advantages[i] <- read_html(html_page) |>
html_nodes('div[class="list_header_semiBold spacer2 ellipsis"]') %>%
html_text() %>% list()
} else {
Locational_advantages[i] <- NA
}
if (!is.na(Locational_advantages[i])){
Distance_to_locational_advantage[i]<- read_html(html_page) |>
html_nodes('div[class="caption_subdued_medium ellipsis"]') %>%
html_text() %>% list()
} else {
Distance_to_locational_advantage[i] <- NA
}
}, error = function(e) {
message("Locational advantages not found: ", e$message)
})
remDr$closeWindow()
rD$server$stop()
# Remove the objects that can clutter the environment
remove(html)
remove(json_ld_data)
remove(json_ld_script)
remove(html_page)
remove(rD)
remove(remDr)
gc()
}
housing_data4_6
Bhk
unlist(urls4_6)
unlist(urls4_6)[i]
identical(unlist(urls4_6)[1], urls[1])
identical(unlist(urls4_6), urls)
# install.packages("remotes") # Uncomment if you do not have the 'remotes' package installed
# remotes::install_github("sachit27/greenR", dependencies = TRUE)
library(greenR)
data <- get_osm_data("Kolkata, India")
green_areas_data <- data$green_areas
visualize_green_spaces(green_areas_data)
green_areas_data$osm_polygons |> names()
green_areas_data$osm_polygons$amenity
library(osmdata)
library(sf)
library(tidyverse)
library(leaflet)
# Define the bounding box for Kolkata
bbox <- getbb("Kolkata, India")
bbox
# Query OSM for green spaces
green_spaces <- opq(bbox = bbox) %>%
add_osm_feature(key = 'leisure', value = 'park') %>%
osmdata_sf()
green_spaces
# Extract the relevant data
parks <- green_spaces$osm_polygons
parks
# Extract coordinates
parks_coords <- st_coordinates(parks)
parks_coords
# Create a leaflet map
leaflet() %>%
addTiles() %>%
addPolygons(data = parks, color = "green", weight = 1, fillColor = "green", fillOpacity = 0.5) %>%
setView(lng = 88.3639, lat = 22.5726, zoom = 12)
# Save the data to a CSV file
parks_df <- as.data.frame(st_coordinates(parks))
View(parks)
read.csv("housing_data.csv") -> house
View(house)
install.packages("geosphere")
library(geosphere)
house$longitude[1]
View(parks)
parks_coords
parks_coords[2,2]
park_coordinates <- parks_coords[,2]   # Coordinates for the park
parks_coords[,2]
parks_coords[1,2]
parks |> select(name) |>
slice(2)
parks |> select(name) |>
slice(2) |> st_coordinates()
parks |> select(name) |>
slice(2) |> st_coordinates()[1]
parks |> select(name) |>
slice(2) |> st_coordinates().[1]
parks |> select(name) |>
slice(2)
parks |> select(name) |>
slice(2) |> st_coordinates() |> slice(1)
parks |> select(name) |>
slice(2) |> st_coordinates()
parks |> select(name) |>
slice(2) |> st_coordinates(1,1)
as_data_frame(parks) |> select(name) |>
slice(2)
as_tibble(parks) |> select(name) |>
slice(2)
names(parks)
as_tibble(parks) |> select(name, geometry) |>
slice(2)
as_tibble(parks) |> select(name, geometry) |>
slice(2) |> st_coordinates(1,1)
parks_coords[,1]
parks_coords[1,1]
parks_coords[1,1]
parks_coords[2,1]
parks_coords[1,]
parks_coords[2,]
as_tibble(parks) |> select(name, geometry) |>
slice(2)
as_tibble(parks) |> select(geometry) |>
slice(2)
as_tibble(parks) |> select(geometry) |>
slice(2) |> st_centroid()
(parks) |> select(geometry) |>
slice(2) |> st_centroid()
(parks) |> select(geometry) |>
slice(2) |> st_centroid() |> as_tibble()
park_coordinates <- (parks) |> select(geometry) |>
slice(2) |> st_centroid() |> as_tibble() # Coordinates for the park
park_coordinates[1,]
park_coordinates[[1]]
park_coordinates[[,1]]
park_coordinates[[1,]]
park_coordinates[[1]][1]
park_coordinates[[1]][,1]
park_coordinates <- (parks) |> select(geometry) |>
slice(2) |> st_centroid() |> as_vector() # Coordinates for the park
house_coords
# Example coordinates (longitude, latitude)
house_coords <- c(house$longitude[1], house$latitude[1])  # Coordinates for the house
house_coords
park_coordinates
park_coordinates |> as_vector()
park_coordinates |> st_geometry()
# Example coordinates (longitude, latitude)
house_coords <- c(house$longitude[1], house$latitude[1]) |> st_geometry() # Coordinates for the house
# Example coordinates (longitude, latitude)
house_coords <- c(house$longitude[1], house$latitude[1]) |> st_sf() # Coordinates for the house
# Example coordinates (longitude, latitude)
st_sf(house)
?st_sf
# Example coordinates (longitude, latitude)
st_sf(house, crs = c(longitude, latitude))
# Example coordinates (longitude, latitude)
house |>
set_as_sf(house, coords = c("longitude", "latitude"))
library(sf)
# Example coordinates (longitude, latitude)
house |>
set_as_sf(house, coords = c("longitude", "latitude"))
# Example coordinates (longitude, latitude)
house |>
st_as_sf(house, coords = c("longitude", "latitude"))
# Example coordinates (longitude, latitude)
house |>
st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326)
# Example coordinates (longitude, latitude)
house |>
sf(house, coords = c("longitude", "latitude"), crs = 4326)
# Example coordinates (longitude, latitude)
house |>
st_sf(house, coords = c("longitude", "latitude"), crs = 4326)
?st_sf
st_sf(house, coords = c("longitude", "latitude"), crs = 4326)
st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326)
st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326) |> select(geometry)
st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326) |> select(geometry) |>
slice(1)
st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326)
house_coordinates <- st_as_sf(house, coords = c("longitude", "latitude"), crs = 4326) |> select(geometry) |>
slice(1)
house_coordinates
park_coordinates
park_coordinates <- (parks) |> select(geometry) |>
slice(2) |> st_centroid() # Coordinates for the park
park_coordinates
house_coordinates
?distVincentySphere()
distVincentySphere(park_coordinates, house_coordinates)
park_coordinates[[1]]
park_coordinates[[1]][1]
distVincentySphere(park_coordinates[[1]][1], house_coordinates[[1]][1])
as_tibble(house_coordinates)
as_tibble(house_coordinates)[1,]
as_tibble(house_coordinates)[1,] |> as_vector()
as_tibble(house_coordinates)[1,]
as_tibble(house_coordinates)[[1]][1,] |> as_vector()
distVincentySphere(as_tibble(park_coordinates)[[1]][1,] |> as_vector(),
as_tibble(house_coordinates)[[1]][1,] |> as_vector())
