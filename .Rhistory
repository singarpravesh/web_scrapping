} else {
Other_facilities[i] <- NA
}
}, error = function(e) {
message("Other facilities not found: ", e$message)
})
Sys.sleep(3)
# Locational advantages
tryCatch({
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", "#LANDMARK_VIEW_ALL")) {
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La1 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La1 <- NA
}
### Next location
Sys.sleep(5)
if (element_exists("css", "i.pageComponent")) {
remDr$findElement(using = "css", value = "i.pageComponent")$clickElement()
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$findElement(using = "css", value = ".RoadDistanceBtmSheet__nudgeWrapper > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La2 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
}else {
La2 <- NA
}
Sys.sleep(2)
if (element_exists("css", ".icon_goToTop")){
remDr$findElement(using = "css", value = ".icon_goToTop")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(3) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La3 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La3 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", value = "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(4) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La4 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La4 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(5) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La5 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La5 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(6) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La6 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La6 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(7) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
La7 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__itemName"]') %>%
html_text()
} else {
La7 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
} else {
La8 <- NA
}
Sys.sleep(5)
Locational_advantages[i] <- mget(paste0('La', 1:8)) |> list()
Sys.sleep(3)
if (!is.na(Locational_advantages[i])){
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
remDr$setTimeout(type = "implicit", milliseconds = 20000) # Wait to load the page
if (element_exists("css", "#LANDMARK_VIEW_ALL")) {
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad1 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad1 <- NA
}
### Next location
Sys.sleep(2)
if (element_exists("css", "i.pageComponent")) {
remDr$findElement(using = "css", value = "i.pageComponent")$clickElement()
remDr$findElement(using = "css", value = "#LANDMARK_VIEW_ALL")$clickElement()
remDr$findElement(using = "css", value = ".RoadDistanceBtmSheet__nudgeWrapper > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad2 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
}else {
Lad2 <- NA
}
Sys.sleep(2)
if (element_exists("css", ".icon_goToTop")){
remDr$findElement(using = "css", value = ".icon_goToTop")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(3) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad3 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad3 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", value = "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(4) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad4 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad4 <- NA
}
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(5) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad5 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad5 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(6) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad6 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad6 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
remDr$findElement(using = "css", value = "div.cc__CarouselBox:nth-child(2) > div:nth-child(1) > div:nth-child(7) > span:nth-child(3) > span:nth-child(1)")$clickElement()
remDr$executeScript("window.scrollTo(0,700);") # Scroll to the specific section
html_page <- remDr$getPageSource()[[1]]
Lad7 <- read_html(html_page) |>
html_nodes('div[class="RoadDistanceBtmSheet__distance"]') %>%
html_text()
} else {
Lad7 <- NA
}
Sys.sleep(2)
if (element_exists("css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")){
remDr$findElement(using = "css", "div.cc__whiteBg:nth-child(3) > i:nth-child(1)")$clickElement()
} else {
Lad8 <- NA
}
Distance_to_locational_advantage[i] <- mget(paste0('La', 1:8)) |> list()
} else {
Distance_to_locational_advantage[i] <- NA
}
}, error = function(e) {
message("Locational advantages not found: ", e$message)
})
remDr$closeWindow()
rD$server$stop()
# Remove the objects that can clutter the environment
remove(html)
remove(json_ld_data)
remove(json_ld_script)
remove(html_page)
remove(rD)
remove(remDr)
gc()
Sys.sleep(3)
}
housing_data_page30 <- tibble(
price = Price,
bhk = Bhk,
area_sqft = as.list(Area_sqft),
latitude = as.character(Latitude) ,
longitude = as.character(Longitude) ,
top_facilities = Top_facilities,
other_facilities = Other_facilities,
locational_advantages = Locational_advantages,
distance_to_locational_advantage = Distance_to_locational_advantage
)
library(osmdata)
library(sf)
library(ggplot2)
# Define the bounding box for Kolkata
kolkata_bbox <- getbb("Kolkata, India")
# Get the boundary of Kolkata
boundary <- opq(bbox = kolkata_bbox) %>%
add_osm_feature(key = "boundary", value = "administrative") %>%
osmdata_sf()
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5)
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5)
boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora'))
kolkata_bbox
boundary
boundary$osm_multipolygons
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5)
boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora'))
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora'),
admin_level == 5)
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora'),
admin_level == '5')
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora'))
kolkata_boundary
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5) |> osmdata_sf()
library(tidyverse)
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5)
kolkata_boundary
# Extract green spaces in Kolkata
kolkata_green_spaces <- opq(bbox = kolkata_bbox) %>%
add_osm_feature(key = "landuse",
value = c("forest", "grass",
"meadow", "recreation_ground",
"village_green")) %>%
osmdata_sf()
# Calculate the centroid of Kolkata
kolkata_centroid <- st_centroid(kolkata_boundary)
# Create a 20 km buffer around the centroid
kolkata_buffer <- st_buffer(kolkata_centroid, dist = 20000)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red")
kolkata_boundary
kolkata_boundary$name == "Kolkata"
filter(kolkata_boundary, name == "Kolkata")
# Calculate the centroid of Kolkata
kolkata_centroid <- st_centroid(filter(kolkata_boundary, name == "Kolkata"))
# Create a 20 km buffer around the centroid
kolkata_buffer <- st_buffer(kolkata_centroid, dist = 20000)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red")
kolkata_buffer
# Calculate the bounding box of the buffer
kolkata_buffer_bbox <- st_bbox(kolkata_buffer)
kolkata_buffer_bbox
# Extend the bounding box by 10 km
kolkata_bbox_extended <- c(kolkata_buffer_bbox[1] - 10000,
kolkata_buffer_bbox[2] - 10000,
kolkata_buffer_bbox[3] + 10000,
kolkata_buffer_bbox[4] + 10000)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[1:2],
ylim = kolkata_bbox_extended[3:4])
kolkata_bbox_extended[1:2]
kolkata_buffer_bbox[1]
kolkata_buffer_bbox[1] - 10000
kolkata_buffer_bbox[2]
# Extend the bounding box by 10 km
kolkata_bbox_extended <- c(kolkata_buffer_bbox[1] - 0.16,
kolkata_buffer_bbox[2] - 0.16,
kolkata_buffer_bbox[3] + 0.16,
kolkata_buffer_bbox[4] + 0.16)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[1:2],
ylim = kolkata_bbox_extended[3:4])
kolkata_buffer_bbox[3]
kolkata_buffer_bbox[3] + 0.16
kolkata_buffer_bbox[3] + 0.16
kolkata_bbox_extended[1:2]
kolkata_bbox_extended[1,3]
kolkata_bbox_extended[c(1,3)]
ylim = kolkata_bbox_extended[c(2,4)]
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Extend the bounding box by 10 km
kolkata_bbox_extended <- c(kolkata_buffer_bbox[1] - 0.26,
kolkata_buffer_bbox[2] - 0.16,
kolkata_buffer_bbox[3] + 0.16,
kolkata_buffer_bbox[4] + 0.16)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Extend the bounding box by 10 km
kolkata_bbox_extended <- c(kolkata_buffer_bbox[1] - 0.06,
kolkata_buffer_bbox[2] - 0.06,
kolkata_buffer_bbox[3] + 0.06,
kolkata_buffer_bbox[4] + 0.06)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Extend the bounding box by 10 km
kolkata_bbox_extended <- c(kolkata_buffer_bbox[1] - 0.006,
kolkata_buffer_bbox[2] - 0.006,
kolkata_buffer_bbox[3] + 0.006,
kolkata_buffer_bbox[4] + 0.006)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the results
map <- ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
map +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')
rm(map)
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Housing data
housing_data_sf <-  housing_data %>%
na.omit() %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 'WGS84')
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, fill = "blue") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
?st_as_sf()
kolkata_bbox
kolkata_buffer_bbox
opq(bbox = kolkata_buffer_bbox)
opq(bbox = kolkata_buffer_bbox) %>%
add_osm_feature(key = "boundary", value = "administrative") %>%
osmdata_sf()
opq(bbox = kolkata_buffer_bbox)
opq(bbox = kolkata_bbox)
# Get the boundary of Kolkata
boundary <- opq(bbox = kolkata_buffer_bbox) %>%
add_osm_feature(key = "boundary", value = "administrative") %>%
osmdata_sf()
kolkata_boundary <-  boundary$osm_multipolygons |> filter(name %in% c('Howrah', 'Kolkata', 'North 24 Parganas',
'South 24 Parganas', 'Haora')) |>
filter(admin_level == 5)
kolkata_boundary
# Extract green spaces in Kolkata
kolkata_green_spaces <- opq(bbox = kolkata_buffer_bbox) %>%
add_osm_feature(key = "landuse",
value = c("forest", "grass",
"meadow", "recreation_ground",
"village_green")) %>%
osmdata_sf()
kolkata_green_spaces
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
kolkata_buffer_bbox
kolkata_buffer
# Housing data
housing_data_sf <-  housing_data %>%
na.omit() %>%
st_as_sf(coords = c("longitude", "latitude"), crs = st_crs(kolkata_buffer))
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
kolkata_centroid
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red")
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue") +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red") +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
# Plot the results
ggplot() +
geom_sf(data = kolkata_boundary, fill = "lightgrey") +
geom_sf(data = kolkata_centroid, col = "red", size = 2) +
geom_sf(data = kolkata_buffer, fill = NA, color = "red") +
geom_sf(data = kolkata_green_spaces$osm_polygons, fill = 'green')+
geom_sf(data = housing_data_sf$geometry, col = "blue", alpha = 0.5) +
coord_sf(xlim = kolkata_bbox_extended[c(1,3)],
ylim = kolkata_bbox_extended[c(2,4)])
install.packages('tidygeocoder')
kolkata_centroid$geometry[1]
kolkata_centroid$geometry[[1]]
kolkata_centroid$geometry[[1]][1]
tidygeocoder::reverse_geocode(lat = kolkata_centroid$geometry[[1]][1], long = kolkata_centroid$geometry[[1]][2] )
some_addresses <- tibble::tribble(
~name,                  ~addr,
"White House",          "1600 Pennsylvania Ave NW, Washington, DC"
)
some_addresses |>
tidygeocoder::reverse_geocode(lat = kolkata_centroid$geometry[[1]][1], long = kolkata_centroid$geometry[[1]][2] )
some_addresses <- tibble::tribble(
~name,                  ~addr, ~lat, ~long
"White House",          "1600 Pennsylvania Ave NW, Washington, DC"  ,  kolkata_centroid$geometry[[1]][1], kolkata_centroid$geometry[[1]][2]
some_addresses <- tibble::tribble(
~name,                  ~addr, ~lat, ~long
"White House",          "1600 Pennsylvania Ave NW, Washington, DC"  ,  88.35657, 22.52608
some_addresses <- tibble::tribble(
~name,                  ~addr, ~lat, ~long
"White House",          "1600 Pennsylvania Ave NW, Washington, DC"  ,  '88.35657', '22.52608'
some_addresses <- tibble::tribble(
~name,                  ~addr, ~lat, ~long
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",  '88.35657', '22.52608'
some_addresses <- tibble::tribble(
~name,                  ~addr, ~lat, ~long
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",  "88.35657", "22.52608"
rm(some_addresses)
